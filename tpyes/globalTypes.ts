type pgsqlTpye = {
  command: string;
  rowCount: number;
  oid: string;
  rows: string[];
  fields: string[];
  _parsers: string[];
  _types: {
    _types: {
      arrayParser: object;
      builtins: {
        BOOL: number;
        BYTEA: number;
        CHAR: number;
        INT8: number;
        INT2: number;
        INT4: number;
        REGPROC: number;
        TEXT: number;
        OID: number;
        TID: number;
        XID: number;
        CID: number;
        JSON: number;
        XML: number;
        PG_NODE_TREE: number;
        SMGR: number;
        PATH: number;
        POLYGON: number;
        CIDR: number;
        FLOAT4: number;
        FLOAT8: number;
        ABSTIME: number;
        RELTIME: number;
        TINTERVAL: number;
        CIRCLE: number;
        MACADDR8: number;
        MONEY: number;
        MACADDR: number;
        INET: number;
        ACLITEM: number;
        BPCHAR: number;
        VARCHAR: number;
        DATE: number;
        TIME: number;
        TIMESTAMP: number;
        TIMESTAMPTZ: number;
        INTERVAL: number;
        TIMETZ: number;
        BIT: number;
        VARBIT: number;
        NUMERIC: number;
        REFCURSOR: number;
        REGPROCEDURE: number;
        REGOPER: number;
        REGOPERATOR: number;
        REGCLASS: number;
        REGTYPE: number;
        UUID: number;
        TXID_SNAPSHOT: number;
        PG_LSN: number;
        PG_NDISTINCT: number;
        PG_DEPENDENCIES: number;
        TSVECTOR: number;
        TSQUERY: number;
        GTSVECTOR: number;
        REGCONFIG: number;
        REGDICTIONARY: number;
        JSONB: number;
        REGNAMESPACE: number;
        REGROLE: number;
      };
    };
    text: {};
    binary: {};
  };
  RowCtor: string;
  rowAsArray: boolean;
};

export { pgsqlTpye };
